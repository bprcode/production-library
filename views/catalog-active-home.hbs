{{! This template populates catalog-layout.hbs }}
{{#> catalog_layout no_back=1 no_title=1 stylesheet='/recent-carousel.css'}}{{#*inline 'content'~}}
<div class="dark-card mb-5">
    <div class="top-bar pb-4 pt-1 ps-3"><h1 class="serif">Welcome to the Catalog</h1></div>
    <div class="d-flex recent-outer" id="recent-outer-id">
        <div class="spotlight-pane">
            <div class="recently-added">
                <div class="recent-overlay serif"><h2 class="fw-semibold">Recently Added</h2></div>
                <div class="camera">
                    <!-- book model -->
                    <div class="book-model">
                        <div class="book-face book-front">
                            <div class="ambient-front"></div>
                            {{#each recent_books~}}
                            <img crossorigin src="debug.jpg" data-index="{{@index}}" class="covers" id="cover-{{@index}}">
                            {{!-- <img crossorigin src="https://covers.openlibrary.org/b/id/{{cover_id}}-M.jpg" data-index="{{@index}}" class="covers" id="cover-{{@index}}"> --}}
                            {{~/each}}
                        </div>
                        <div class="book-face book-left"></div>
                        <div class="book-face book-right">
                            <div class="ambient-right"></div>
                        </div>
                        <div class="book-face book-top"></div>
                        <div class="ambient-before"></div>
                        <div class="blob-shadow"></div>
                    </div>
                    <!-- /book model -->
                </div>
            </div>
        </div>

        <!-- Cycling presentation text -->
        <div class="cycle-container">
            <div class="curtain-right"></div>
            <div class="d-flex cycle-text" id="cycle-id">
                <div class="current-pane ps-0 ps-lg-2 pe-3" id="current-pane-id">
                    <h2 class="cycle-title serif text-break clamp-text clamp-3" id="current-title"></h2>
                    <p class="text-break clamp-text" id="current-copy"></p>
                    <div class="d-flex justify-content-end" style="height:auto;">
                        <a class="fw-semibold carousel-link me-5" id="current-link" href="#">More...</a>
                    </div>
                </div>
                <div class="next-pane ps-0 ps-lg-2 pe-3" id="next-pane-id">
                    <h2 class="cycle-title serif text-break clamp-text clamp-3" id="next-title"></h2>
                    <p class="text-break clamp-text" id="next-copy"></p>
                    <div class="d-flex justify-content-end" style="height:auto;">
                        <a class="fw-semibold carousel-link me-5" id="next-link" href="#">More...</a>
                    </div>
                </div>
            </div>
        </div>
        <!-- /cycling presentation text -->

    </div>
</div>

<!-- Catalog description -->
<p class="ps-3 mb-4 lead"><i class="serif fw-semibold fst-normal">Archivia</i> is an editable catalog of literary works, featuring:</p>
<div class="mb-5 ps-2 pt-2 landing-info d-flex flex-row justify-content-evenly align-items-center">    
    <div class="landing-box landing-books d-flex justify-content-center">
        <span class="landing-count">{{book_count}}</span>
        <span class="landing-label">books</span>
    </div>
    <div class="landing-box landing-authors d-flex justify-content-center">
        <span class="landing-count">{{author_count}}</span>
        <span class="landing-label">authors</span>
    </div>
    <div class="landing-box landing-genres d-flex justify-content-center">
        <span class="landing-count">{{genre_count}}</span>
        <span class="landing-label">subjects</span>
    </div>
</div>
<div class="d-flex">
    <p class="lead ms-2 ps-2 pt-3"><a href="/catalog/books" class="fw-semibold">Browse</a> the catalog or <a href="/catalog/book/import" class="fw-semibold">import</a> a new work today!</p>
</div>
<!-- /catalog description -->

<script>

const log = console.log.bind(console)
const select = document.querySelector.bind(document)
const el = document.getElementById.bind(document)

const loadedImages = []
const spotlightData = [
    {{#each recent_books}}
    {
        title: `{{title}}`,
        snippet: abbreviateSnippet(`{{snippet}}`),
        cover_id: `{{cover_id}}`,
        book_url: `{{book_url}}`,
        index: `{{@index}}`,
    },
    {{/each}}
]

const showTime = 8; // seconds for each animation cycle
const cycleDelay = 0.75; // seconds to offset the text animation

document.documentElement.style.setProperty('--show-time', showTime + 's')

let loadsWaiting = spotlightData.length

// Populate initial cycling text
const highestIndex = Math.max(...spotlightData.map(d => d.index))
const initialRecord = spotlightData.find(
                        d => parseInt(d.index) === highestIndex)
                        || {
                            title: '',
                            snippet: 'No titles yet. Add a book to get '
                                + 'this catalog started!',
                            book_url: 'catalog/book/create',
                        }
el('current-title').innerHTML = initialRecord.title
el('current-copy').innerHTML = initialRecord.snippet
el('current-link').href = initialRecord.book_url

for (const cover of document.querySelectorAll('.covers')) {
    if (cover.complete) {
        if (cover.naturalHeight === 0) {
            handleImageLoad(failover(cover))

        } else {
            handleImageLoad(cover)
        }

        continue
    }

    cover.addEventListener('load', reactToLoad)
    cover.addEventListener('error', event => {
        const replacement = failover(event.target)
        handleImageLoad(replacement)
    })

    // Create a replacement element with similar properties,
    // add it to the DOM, remove the previous element.
    function failover (element) {
        element.removeEventListener('load', reactToLoad)

        let div = document.createElement('div')
        const parsed = new DOMParser().parseFromString(
            spotlightData[element.dataset.index].title, 'text/html')
            .documentElement.textContent
        div.textContent = parsed

        div.classList.add('covers', 'serif', 'fw-semibold', 'fs-5',
                            'bg-light', 'text-dark', 'text-break',
                            'overflow-hidden', 'mt-5', 'px-3', 'py-1',
                            'text-center', 'text-break', 'clamp-text',
                            'clamp-3')
        div.width = 180
        div.height = 300
        div.dataset.index = element.dataset.index
        div.style = 'max-height: 300px; --bs-bg-opacity: .6;'
                    + 'border-top: 8px solid #0008;'
                    + 'border-bottom: 8px solid #0008;'

        element.after(div)
        element.parentElement.removeChild(element)

        return div
    }

    function reactToLoad (event) {
        handleImageLoad(event.target)
    }
}

function abbreviateSnippet (snippet) {
    const maxLength = 180
    const minLength = 80

    if (snippet.length <= maxLength) { return snippet }

    const maxedSlice = snippet.slice(0, maxLength)
    const coherentSlice =
        maxedSlice.match(/^.*\s/)?.[0] || maxedSlice // Break on last space
    const firstSentence =
        snippet.match('^[^.]*\.')?.[0] || maxedSlice // Break on last period

    if (firstSentence.length < maxLength
            && firstSentence.length > minLength) {
        return firstSentence
    }

    // Otherwise...
    return coherentSlice + '...'
}

function handleImageLoad(element) {

    loadedImages.push({
        element: element,
        aspect: element.width / element.height || 0.6,
        info: spotlightData[element.dataset.index]
    })

    // Sort descending based on template index
    // (which is itself based on serial index -- hence, newest first.)
    loadedImages.sort((a,b) => b.info.index - a.info.index)

    --loadsWaiting
    if (loadsWaiting < 1) {
        updateCover()
        setInterval(updateCover, showTime * 1000)
    }
}

function restartAnimations () {
    select('.camera').classList.remove('camera-animate')
    select('.book-model').classList.remove('book-model-animate')
    select('.book-front').classList.remove('book-front-animate')
    select('.blob-shadow').classList.remove('blob-shadow-animate')
    void el('recent-outer-id').offsetWidth // Force reflow
    
    setTimeout(() => {
        select('.camera').classList.add('camera-animate')
        select('.book-model').classList.add('book-model-animate')
        select('.book-front').classList.add('book-front-animate')
        select('.blob-shadow').classList.add('blob-shadow-animate')
    }, 30)
    

    // Apply a slight delay to the text cycle:
    setTimeout(() => {
        el('cycle-id').classList.remove('cycle-forward-animate')
        void el('cycle-id').offsetWidth // Force reflow for animation restart
        el('cycle-id').classList.add('cycle-forward-animate')
    }, cycleDelay * 1000)
}

function updateCover () {

    updateCover.counter ??= 0
    const image = loadedImages[updateCover.counter]
    const upcoming = loadedImages[(updateCover.counter + 1)
                                    % loadedImages.length]
    if (!image) {
        return
    }

    setTimeout(() => {
        el('current-title').innerHTML = image.info.title
        el('current-copy').innerHTML = image.info.snippet
        el('current-link').href = image.info.book_url
        el('next-title').innerHTML = upcoming.info.title
        el('next-copy').innerHTML = upcoming.info.snippet
        el('next-link').href = upcoming.info.book_url
    }, cycleDelay * 1000)

    // Prepare to swap slides:
    setTimeout(() => {
        el('current-title').innerHTML = upcoming.info.title
        el('current-copy').innerHTML = upcoming.info.snippet
        el('current-link').href = upcoming.info.book_url
    }, showTime * 0.97 * 1000 + cycleDelay * 1000)

    document.documentElement.style.setProperty(
        '--book-aspect', image.aspect)
    
    for (const e of document.querySelectorAll('.covers')) {
        e.classList.add('d-none')
    }
    image.element.classList.remove('d-none')
    updateCover.counter++
    updateCover.counter %= loadedImages.length

    restartAnimations()
}

</script>
{{~/inline}}{{/catalog_layout}}
